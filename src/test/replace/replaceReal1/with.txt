function decomposeMarkdownString(markdownString: string, languageId: string): string[] {
  const decomposedStringParts: string[] = [];
  const lines = markdownString.split('\n');
  let inCodeBlock = false;
  let codeLanguage = '';
  let commentLines = []; // Added new variable to store lines that will be in the comment block
  
  lines.forEach(line => {
    if (line.startsWith("```")) {
      // Switch between code block and comment states.
      inCodeBlock = !inCodeBlock;
      
      if (!inCodeBlock) { // Added condition to handle the lines in the comment block once we exit the code block
        const languageSpecificComment = getCommentForLanguage(languageId, commentLines.join('\n'));
        decomposedStringParts.push(languageSpecificComment);
        commentLines = []; // Reset the commentLines array for further use
      }
      
      // Update codeLanguage when entering a code block.
      if (inCodeBlock) {
        codeLanguage = line.slice(3);
      }
    } else if (inCodeBlock && codeLanguage === languageId) {
      // Add line as is when inside a code block with matching language.
      decomposedStringParts.push(line);
    } else {
      // Add line to commentLines when outside of a compatible code block.
      commentLines.push(line);
    }
  });

  // Handle remaining lines in the comment block after the loop has finished
  if (commentLines.length > 0) {
    const languageSpecificComment = getCommentForLanguage(languageId, commentLines.join('\n'));
    decomposedStringParts.push(languageSpecificComment);
  }

  return decomposedString
}