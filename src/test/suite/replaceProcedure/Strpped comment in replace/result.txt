import { getCommentForLanguage } from "../utils/comments";

function splitLongWord(word: string, maxChars: number): string[] {
  return word.match(new RegExp(`.{1,${maxChars}}`, 'g')) || [];
}

export function splitCommentIntoLines(comment: string, maxChars = 80): string[] {
  const linesResult: string[] = [];

  const lines = comment.split('\n');

  lines.forEach((line) => {
    const words = line.split(/\s+/);

    let currentLine = '';

    words.forEach((word) => {
      if (word.length > maxChars) {
        const subStrings = splitLongWord(word, maxChars);
        linesResult.push(...subStrings);
      } else if (currentLine.length + word.length + (currentLine.length ? 1 : 0) <= maxChars) {
        currentLine += (currentLine ? ' ' : '') + word;
      } else {
        linesResult.push(currentLine);
        currentLine = word;
      }
    });

    linesResult.push(currentLine);
  });

  return linesResult;
}

export function decomposeMarkdownString(markdownString: string, languageId: string): string[] {
  const lines = markdownString.split('\n');
  let inCodeBlock = false;

  const decomposedStringParts: string[] = [];
  let commentBuffer: string[] = [];

  lines.forEach((line) => {
    if (line.startsWith('```')) {
      inCodeBlock = !inCodeBlock;

      if (inCodeBlock) {
      } else {
        decomposedStringParts.push(''); // Extra newline after code block
      }
    } else if (inCodeBlock) {
      dumpCommentBuffer(languageId, commentBuffer, decomposedStringParts);

      decomposedStringParts.push(line);
    } else {
      commentBuffer.push(line);
    }
  });

  dumpCommentBuffer(languageId, commentBuffer, decomposedStringParts);

  return decomposedStringParts;
}

/**
 * Removes empty lines from the beginning and end of the input array.
 *
 * @param {string[]} lines The input array of lines.
 * @returns {string[]} The output array with empty lines removed from the beginning and end.
 */
function trimEmptyLines(lines: string[]): string[] {
  let start = 0;
  let end = lines.length - 1;

  // Find the first non-empty line from the beginning
  while (start < lines.length && lines[start].trim() === "") {
    start++;
  }

  // Find the first non-empty line from the end
  while (end >= 0 && lines[end].trim() === "") {
    end--;
  }

  // Return the array slice between start and end (inclusive)
  return lines.slice(start, end + 1);
}

/**
 * Processes the comment buffer, formats it according to the document language, and
 * appends it to the decomposedStringParts array.
 *
 * @param {string} languageId The language ID of the document.
 * @param {string[]} commentBuffer The buffer holding the comment lines.
 * @param {string[]} decomposedStringParts Array holding the decomposed markdown string parts.
 * @returns {void}
 */
function dumpCommentBuffer(languageId: string, commentBuffer: string[], decomposedStringParts: string[]): void {
  if (commentBuffer.length > 0) {
    const trimmedCommentLines = commentBuffer; //check if that was needed: trimEmptyLines(
    const splitComment = splitCommentIntoLines(trimmedCommentLines.join("\n")).join("\n").trim();

    if (splitComment.length > 0) {
      const languageSpecificComment = getCommentForLanguage(languageId, splitComment);
      decomposedStringParts.push(languageSpecificComment);
    }

    // Clear the comment buffer for the next block
    commentBuffer.length = 0;
  }
}
