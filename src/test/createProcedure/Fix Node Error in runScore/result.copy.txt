

import * as glob from "glob";
import path from "path";
import fs from "fs";
import { initCLISystems, setupCLISystemsForTest } from "../CLI/setupCLISystems";
import { MinionTask } from "../MinionTask";
import { getEditorManager } from "../managers/EditorManager";
import { applyMinionTask } from "../strategies/utils/applyMinionTask";
import { GptMode, gptExecute } from "../openai";
import * as ts from 'typescript';

async function checkFunctionReturnType({ code, functionName }: { code: string; functionName: string }): Promise<string> {
  try {
    // Create and compile program
    const sourceFile = ts.createSourceFile('temp.ts', code, ts.ScriptTarget.ES2015, true);
    const program = ts.createProgram(['temp.ts'], {});
    const checker = program.getTypeChecker();

    // Helper function to search the AST nodes for a function declaration
    function findFunctionDeclaration(node: ts.Node, functionName: string): ts.FunctionDeclaration | undefined {
      if (ts.isFunctionDeclaration(node) && node.name && node.name.text === functionName) {
        return node;
      }

      let functionDecl: ts.FunctionDeclaration | undefined;
      ts.forEachChild(node, (childNode) => {
        if(functionDecl) return; 
        functionDecl = findFunctionDeclaration(childNode, functionName);
      });
      
      return functionDecl;
    }

    // Find function declaration
    const funcDecl = findFunctionDeclaration(sourceFile, functionName);

    if (!funcDecl || !funcDecl.name) {
      throw new Error(`Function '${functionName}' not found in code.`);
    }

    const funcSym = checker.getSymbolAtLocation(funcDecl.name);
  
    if (!funcSym) {
      throw new Error(`Symbol not found for function '${functionName}'.`);
    }

    // Check if valueDeclaration is defined before using it
    if (!funcSym.valueDeclaration) {
      throw new Error(`Value declaration not found for function '${functionName}'.`);
    }

    const typeOfFuncSym = checker.getTypeOfSymbolAtLocation(funcSym, funcSym.valueDeclaration);
    const returnType = checker.getReturnTypeOfSignature(typeOfFuncSym.getCallSignatures()[0]);

    return checker.typeToString(returnType);
  } catch (error) {
    logToFile(`Error during return type check: ${error instanceof Error ? error.message : error}`);
    return "Error during return type check";
  }
}

function logToFile(logMessage: string) {
  const directoryPath = path.join(__dirname, "logs");
  const filePath = path.join(directoryPath, `log.log`); // Hardcoded the filename here

  // Check if logs directory exist or not
  if (!fs.existsSync(directoryPath)) {
    fs.mkdirSync(directoryPath); // If logs directory does not exist, create it
  }

  // If the file does not exist, create it, else append to it. `writeFileSync` and `appendFileSync` both create the file if it doesn't exist.
  if (!fs.existsSync(filePath)) {
    fs.writeFileSync(filePath, logMessage + "\n");
  } else {
    fs.appendFileSync(filePath, logMessage + "\n");
  }
}

/**
 * Deletes a log file if it exists.
 * @param {string} logType - the type of the log file, default to 'log'
 */
function resetLogFile() {
  const directoryPath = path.join(__dirname, "logs");
  const filePath = path.join(directoryPath, `log.log`); // Hardcoded the filename here

  // Check if the log file exists
  if (fs.existsSync(filePath)) {
    // If log file does exist, delete it
    fs.unlinkSync(filePath);
  }
}

async function gptAssert({
  originalCode,
  resultingCode,
  mode = "FAST",
  assertion,
}: {
  originalCode: string;
  resultingCode: string;
  mode?: GptMode;
  assertion: string;
}) {
  let response = await gptExecute({
    fullPrompt: `Original code:\n${originalCode}\n\nResulting code:\n${resultingCode}\n\nPlease analyse the resulting code and answer: does the resulting code passess this test: "${assertion}"\n\n`,
    maxTokens: 100,
    mode,
    outputType: {
      name: "reportTestResult",
      description: `Report a result of the test, whanever the resulting code meets the criteria: ${assertion}, provide a comment explaining why it does not meet the criteria`,
      parameters: {
        type: "object",
        properties: {
          comment: { type: "string", description: "Desribe the reason for why the code passed (or did not pass) the test." },
          passessTest: { type: "boolean" },
        },
        required: ["passessTest", "comment"],
      },
    },
  });

  let { passessTest, comment } = JSON.parse(response.result);

  return {
    passessTest,
    comment,
  };
}

export type TestDefinition = { type: "gptAssert"; mode: GptMode; assertion: string } | { type: "simpleStringFind"; stringToFind: string } | { type: "functionReturnTypeCheck"; functionName: string; expectedType: string  };

async function runTest({ fileName, iterations = 5 }: { fileName: string; iterations?: number }) {
  let tests: TestDefinition[] = require(path.join(__dirname, "score", fileName + ".tests.json"));
  let userQuery = fs.readFileSync(path.join(__dirname, "score", fileName + ".userQuery.txt"), "utf8");

  let statistics = {
    total: 0,
    passed: 0,
  };

  console.log(`Running test for '${fileName}'`);

  for (let i = 0; i < iterations; i++) {
    setupCLISystemsForTest();

    console.log(`Iteration ${i + 1} of ${iterations}`);

    const checkPath = path.join(__dirname, "score", fileName + ".selectedText.txt"); // Path to the selectedText file
    const selectedTextExists = fs.existsSync(checkPath); // Check if selectedText file exists
    const readSelectedText = selectedTextExists ? fs.readFileSync(checkPath, "utf8") : ""; // Read the selectedText file if it exists, else "".

    let start = { line: 0, character: 0 };
    let end = { line: 0, character: 0 };

    if (readSelectedText !== "") {
      const startIndex = userQuery.indexOf(readSelectedText);
      const endIndex = startIndex + readSelectedText.length;

      // For simplicity we're considering flat characters indices in file
      // A more advanced implementation would consider \n character to split lines
      start = { line: startIndex, character: 0 };
      end = { line: endIndex, character: 0 };
    }

    const execution = await MinionTask.create({
      userQuery,
      document: await getEditorManager().openTextDocument(getEditorManager().createUri(path.join(__dirname, "score", fileName))),

      // Use dynamically calculated 'start' and 'end'
      selection: { start, end },

      selectedText: readSelectedText,
      minionIndex: 0,
      onChanged: async (important) => {},
    });
    await execution.run();
    await applyMinionTask(execution);

    let resultingCode = (await execution.document()).getText();

    logToFile("File contents");
    logToFile(resultingCode);

    for (let test of tests) {
      statistics.total++;

      if (test.type === "gptAssert") {
        let { passessTest, comment } = await gptAssert({ originalCode: execution.originalContent, resultingCode, assertion: test.assertion });
        logToFile(`Test: ${test.assertion}`);
        logToFile(`Comment: ${comment}`);

        if (!passessTest) {
          logToFile(`Test failed: ${test.assertion}`);
          logToFile(`Comment: ${comment}`);
        } else {
          statistics.passed++;
        }
      } else if (test.type === "simpleStringFind") {
        let passessTest = resultingCode.includes(test.stringToFind);
        logToFile(`Test: ${test.stringToFind}`);

        if (!passessTest) {
          logToFile(`Test failed: ${test.stringToFind}`);
        } else {
          statistics.passed++;
        }
      } else if (test.type === "functionReturnTypeCheck") {
        let returnType = await checkFunctionReturnType({ code: resultingCode, functionName: test.functionName });
        logToFile(`Return type of function ${test.functionName}: ${returnType}`);
  
        if (returnType !== test.expectedType) {
          logToFile(`Test failed: The return type of function ${test.functionName} is not ${test.expectedType}`);
        } else {
          statistics.passed++;
        }
      }
    }
  }

  console.log(
    `Test summary for '${fileName}' (over ${iterations} iterations)\n Total: ${statistics.total}\nPassed: ${statistics.passed}\nFailed: ${
      statistics.total - statistics.passed
    }`
  );
}

async function runScoring(): Promise<void> {
  console.log("Running tests...");

  resetLogFile();

  logToFile("\n\nRunning tests...\n\n");

  initCLISystems();

  // Use glob to get all .original.txt file paths from the 'score' directory
  let testFileNames = glob.sync("**/*.original.txt", { cwd: path.join(__dirname, "score") });

  for (let fullName of testFileNames) {
    let baseName = path.basename(fullName).replace(".original.txt", "");
    await runTest({ fileName: baseName });
  }

  console.log("Done!");
}

runScoring();
