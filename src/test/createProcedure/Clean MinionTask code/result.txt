import { randomUUID } from "crypto";
import * as path from "path";
import * as vscode from "vscode";
import { MinionTasksManager } from "./MinionTasksManager";
import { gptExecute } from "./gptExecute";
import { STAGES, TOTAL_WEIGHTS as STAGES_TOTAL_WEIGHTS } from "./stages/config";
import { CANCELED_STAGE_NAME, FINISHED_STAGE_NAME, TASK_CLASSIFICATION_NAME } from "./ui/MinionTaskUIInfo";
import { calculateAndFormatExecutionTime } from "./utils/calculateAndFormatExecutionTime";

/**
 * MinionTask class represents a task to be executed in the application.
 * It handles the task lifecycle from creation, execution, logging, reporting progress, and stopping the execution.
 */
export class MinionTask {
  readonly userQuery: string;
  readonly id: string;
  readonly minionIndex: number;

  readonly documentURI: string;
  readonly selection: vscode.Selection;
  readonly selectedText: string;
  readonly onChanged: (important: boolean) => Promise<void>;

  rejectProgress?: (error: string) => void;
  resolveProgress?: () => void;


  private _originalContent: string;

  get originalContent(): string {
    return this._originalContent;
  }

  set originalContent(value: string) {
    this._originalContent = value;
    MinionTasksManager.instance.originalContentProvider.reportChange(vscode.Uri.parse(this.originalContentURI));
  }

  //
  // tracking variables between stages
  //
  shortName: string;
  
  finalContent: string;
  contentWhenDismissed: string;
  currentStageIndex: number = 0;
  startTime: number;
  modificationDescription: string;
  modificationProcedure: string;
  stopped: boolean = true;
  progress: number = 1;
  executionStage: string;
  classification?: TASK_CLASSIFICATION_NAME;
  logContent: string = "";

  /**
   * Constructs a MinionTask instance with the provided parameters.
   * @param {Object} options - Options for initializing the MinionTask.
   * @param {string} options.id - The unique ID of the MinionTask.
   * @param {number} options.minionIndex - The index of the minion within the execution sequence.
   * @param {string} options.documentURI - The URI of the document associated with the task.
   * @param {string} options.userQuery - The user's query associated with the task.
   * @param {vscode.Selection} options.selection - The selected text within the document.
   * @param {string} options.selectedText - The text selected by the user within the document.
   * @param {string} options.originalContent - The original content of the document.
   * @param {string} [options.finalContent=""] - Optional final content of the task.
   * @param {string} [options.contentWhenDismissed=""] - Optional content of the task when dismissed.
   * @param {number} options.startTime - The start time of the task execution.
   * @param {(important: boolean) => Promise<void>} [options.onChanged] - Optional handler for change events related to the task's state. Defaults to throwing an error if not provided.
   * @param {string} [options.shortName=""] - Optional short name for the task.
   * @param {string} [options.modificationDescription=""] - Optional description of the modification to be applied or applied.
   * @param {string} [options.modificationProcedure=""] - Optional procedure to take when applying modification.
   * @param {boolean} [options.modificationApplied=false] - Indicates whether the modification has been applied or not.
   * @param {string} [options.executionStage=""] - Optional name of the execution stage.
   * @param {TASK_CLASSIFICATION_NAME} [options.classification] - Optional classification of the task.
   * @param {string} [options.logContent=""] - Optional initial log content.
   */
  constructor(options: {
    id: string;
    minionIndex: number;
    documentURI: string;
    userQuery: string;
    selection: vscode.Selection;
    selectedText: string;
    originalContent: string;
    finalContent?: string;
    contentWhenDismissed?: string;
    startTime: number;
    onChanged?: (important: boolean) => Promise<void>;
    shortName?: string;
    modificationDescription?: string;
    modificationProcedure?: string;
    modificationApplied?: boolean;
    executionStage?: string;
    classification?: TASK_CLASSIFICATION_NAME;
    logContent?: string;
  }) {
    this.id = options.id;
    this.minionIndex = options.minionIndex;
    this.documentURI = options.documentURI;
    this.userQuery = options.userQuery;
    this.selection = options.selection;
    this.selectedText = options.selectedText;
    this._originalContent = options.originalContent;
    this.finalContent = options.finalContent || "";
    this.contentWhenDismissed = options.contentWhenDismissed || "";
    this.startTime = options.startTime;
    this.onChanged = options.onChanged || (async (important: boolean) => { throw new Error("Should be implemented"); });
    this.shortName = options.shortName || "";
    this.modificationDescription = options.modificationDescription || "";
    this.modificationProcedure = options.modificationProcedure || "";
    this.executionStage = options.executionStage || "",
    this.classification = options.classification;
    this.logContent = options.logContent || "";
  }


  /**
   * Returns the log URI string for the MinionTask.
   */
  get logURI() {
    return `10minions-log:minionTaskId/${this.id}/${("[" + this.shortName + "].md").replace(/ /g, "%20")}`;
  }

  /**
   * Returns the original content URI string for the MinionTask.
   */
  get originalContentURI() {
    return `10minions-originalContent:minionTaskId/${this.id}/${(this.shortName + ".txt").replace(/ /g, "%20")}`;
  }

  /**
   * Appends the content to the log of the MinionTask and reports the change.
   * @param {string} content - Content to append to the log.
   */
  appendToLog(content: string): void {
    this.logContent += content;

    MinionTasksManager.instance.logProvider.reportChange(vscode.Uri.parse(this.logURI));
  }
  
  /**
   * Clears the log content of the MinionTask and reports the change.
   */
  clearLog() {
    this.logContent = "";
    MinionTasksManager.instance.logProvider.reportChange(vscode.Uri.parse(this.logURI));
  }

  static async create({
    userQuery,
    document,
    selection,
    selectedText,
    minionIndex,
    onChanged,
  }: {
    userQuery: string;
    document: vscode.TextDocument;
    selection: vscode.Selection;
    selectedText: string;
    minionIndex: number;
    onChanged: (important: boolean) => Promise<void>;
  }): Promise<MinionTask> {
    const minionTaskId = randomUUID();

    const execution = new MinionTask({
      id: minionTaskId,
      minionIndex,
      documentURI: document.uri.toString(),
      userQuery,
      selection,
      selectedText,
      originalContent: await document.getText(),
      startTime: Date.now(),
      onChanged,
    });

    execution.stopped = false;
    execution.progress = 1;

    return execution;
  }

  public async document() {
    let document = await vscode.workspace.openTextDocument(vscode.Uri.parse(this.documentURI));
    return document;
  }

  public async stopExecution(error?: string, important: boolean = true) {
    if (this.stopped) {
      return;
    }

    this.stopped = true;
    this.executionStage = error ? error : FINISHED_STAGE_NAME;

    if (this.rejectProgress && error) this.rejectProgress(error);
    else if (this.resolveProgress) this.resolveProgress();

    this.rejectProgress = undefined;
    this.resolveProgress = undefined;

    //delete tmp file
    //vscode.workspace.fs.delete(refDocument.uri);
    await this.onChanged(important);
  }

  public reportSmallProgress(fractionOfBigTask: number = 0.005) {
    const weigtsNextStepTotal = STAGES.reduce((acc, stage, index) => {
      if (index > this.currentStageIndex) {
        return acc;
      }
      return acc + stage.weight;
    }, 0);

    const remainingProgress = (1.0 * weigtsNextStepTotal) / STAGES_TOTAL_WEIGHTS;
    const currentProgress = this.progress;

    const totalPending = remainingProgress - currentProgress;
    let increment = totalPending * fractionOfBigTask;
    this.progress = this.progress + increment;
    this.onChanged(false);
  }

  public async run() {
    return new Promise<void>(async (resolve, reject) => {
      if (this.stopped) {
        return;
      }

      this.resolveProgress = resolve;
      this.rejectProgress = reject;
      this.currentStageIndex = 0;

      this.setShortName();

      try {
        while (this.currentStageIndex < STAGES.length && !this.stopped) {
          this.executionStage = STAGES[this.currentStageIndex].name;

          this.appendToLog(
            [
              `////////////////////////////////////////////////////////////////////////////////`,
              `// Stage ${this.currentStageIndex + 1}: ${this.executionStage}`,
              `////////////////////////////////////////////////////////////////////////////////`,
            ].join("\n") + "\n\n"
          );


          await STAGES[this.currentStageIndex].execution.apply(this);

          if (this.stopped) {
            break;
          }

          const weigtsNextStepTotal = STAGES.reduce((acc, stage, index) => {
            if (index > this.currentStageIndex) {
              return acc;
            }
            return acc + stage.weight;
          }, 0);

          this.progress = weigtsNextStepTotal / STAGES_TOTAL_WEIGHTS;
          this.onChanged(false);
          this.currentStageIndex++;
        }
      } catch (error) {
        if (error !== CANCELED_STAGE_NAME) {
          vscode.window.showErrorMessage(`Error in execution: ${error}`);
          console.error("Error in execution", error);
        }

        this.stopExecution(String(error));
      } finally {
        const executionTime = Date.now() - this.startTime;
        const formattedExecutionTime = calculateAndFormatExecutionTime(executionTime);

        this.appendToLog( `${this.executionStage} (Execution Time: ${formattedExecutionTime})\n\n`);

        this.progress = 1;
      }
    });
  }

  private async setShortName() {
    this.shortName = "...";
    let context = this.selectedText
      ? `
==== WHAT USER SELECTED ====
${this.selectedText}
      `.trim()
      : `
==== WHAT IS THE NAME OF THE FILE ====
${this.baseName}    
      `.trim();

    await gptExecute({
      maxTokens: 20,
      fullPrompt: `
      Create a very short summary of a task. Maximum of 20 characters. You MUST not exceed this number. Try to combine info both from what user said and what user selected / file name. If a selected identifier is too long or file name is too long, just use some keywords from it.

      ==== WHAT USER SAID ====
      ${this.userQuery}

      ${context}
      
      `.trim(),
    }).then((res) => {
      this.shortName = res || this.baseName;
      this.onChanged(true);
    });
  }

  get baseName() {
    return path.basename(vscode.Uri.parse(this.documentURI).fsPath);
  }
}
