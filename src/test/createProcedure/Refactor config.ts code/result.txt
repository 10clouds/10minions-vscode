import { stageStarting } from "./1_stageStarting";
import { stageClassifyTask } from "./2_stageClassifyTask";
import { stageCreateModification } from "./3_stageCreateModification";
import { stageCreateModificationProcedure } from "./4_stageCreateModificationProcedure";
import { stageFinishing } from "./7_stageFinishing";

interface IStage {
  name: string;
  weight: number;
  execution: Function;
}

class Stage implements IStage {
  constructor(public name: string, public weight: number, public execution: Function) {}
}

export const STAGES: Stage[] = [
  new Stage("Starting ...", 10, stageStarting),
  new Stage("Understanding ...", 50, stageClassifyTask),
  new Stage("Conceptualising ...", 100, stageCreateModification),
  new Stage("Preparing Changes ...", 80, stageCreateModificationProcedure),
  new Stage("Finishing ...", 10, stageFinishing),
];

export const TOTAL_WEIGHTS = STAGES.reduce((acc, stage) => {
  return acc + stage.weight;
}, 0);